<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LingDie Blog</title>
    <description>关于后台与开发、PHP与MySql | 靈蝶 | 这里是 靈蝶 的个人博客，与你一起发掘更大的世界。</description>
    <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/</link>
    <atom:link href="https://github.com/huaxiazhijian/huaxiazhijian.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 01 Nov 2016 21:17:57 +0800</pubDate>
    <lastBuildDate>Tue, 01 Nov 2016 21:17:57 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>php面向对象编程「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;面向对象编程三大特征&lt;/h3&gt;

&lt;h2 id=&quot;section-1&quot;&gt;封装&lt;/h2&gt;

&lt;p&gt;首先先介绍一个抽象的概念 抽象：&lt;br /&gt;
我们在前面去定义一个类时候，实际上就是把一类事物的共有的属性和行为提取出 来形成一个物理模型(模板)。这种研究问题的方法称为抽象。 那么什么是封装呢？&lt;br /&gt;
封装就是把抽象出的数据和对数据的操作封装在一起,数据被保护在内部,程序的其它部 分只有通过被授权的操作(成员方法),才能对数据进行操作。&lt;br /&gt;
上边概念中我标蓝的部分中提到了封装时的数据保护和方法的授权，因此，在彻底了解 封装之前先说一下访问控制修饰符。  &lt;br /&gt;
public        表示全局，类内部、外部和子类都可以访问； &lt;br /&gt;
protected       表示受保护的，只有本类或子类可以访问； &lt;br /&gt;
private         表示私有的，只有本类内部可以使用；  php中对象的成员变量的访问属性不能是默认的   比如: &lt;br /&gt;
class Person{ $name=‘abc’; } $p1=new Person();是错误的&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/phpobject/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/phpobject/</guid>
        
        <category>PHP</category>
        
        <category>面向对象</category>
        
        <category>编程思维</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>javascript正则表达式「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;javascript&quot;&gt;javascript常用正则表达式规则&lt;/h3&gt;

&lt;p&gt;字符    描述 &lt;br /&gt;
/n      换行符 &lt;br /&gt;
/r      回车符 &lt;br /&gt;
/t      制表符 &lt;br /&gt;
/f      换页符（Tab） &lt;br /&gt;
/cX     与X对应的控制字符 &lt;br /&gt;
/b      退格符(BackSpace) &lt;br /&gt;
/v      垂直制表符 &lt;br /&gt;
/0      空字符(“”)&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;正则表达式中的预定义类：&lt;/h2&gt;

&lt;p&gt;代码  等同于                  匹配 &lt;br /&gt;
.     IE下[^/n]，其它[^/n/r]  匹配除换行符之外的任何一个字符 &lt;br /&gt;
/d    [0-9]                   匹配数字 &lt;br /&gt;
/D    [^0-9]                  匹配非数字字符 &lt;br /&gt;
/s    [ /n/r/t/f/x0B]         匹配一个空白字符 &lt;br /&gt;
/S    [^ /n/r/t/f/x0B]        匹配一个非空白字符 &lt;br /&gt;
/w    [a-zA-Z0-9_]            匹配字母数字和下划线 &lt;br /&gt;
/W    [^a-zA-Z0-9_]           匹配除字母数字下划线之外的字符&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;量词(下表量词单个出现时皆是贪婪量词)&lt;/h2&gt;

&lt;p&gt;代码  描述&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。&lt;/li&gt;
  &lt;li&gt;匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 &lt;br /&gt;
?     匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。 &lt;br /&gt;
{n}   n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 &lt;br /&gt;
{n,}  n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*‘。 &lt;br /&gt;
{n,m} m 和 n 均为非负整数，其中n &amp;lt;= m。最少匹配 n 次且最多匹配 m 次。刘， “o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;贪婪量词与惰性量词&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;用贪婪量词进行匹配时，它首先会将整会字符串当成一个匹配，如果匹配的话就退出，如果不匹配，就截去最后一个字符进行匹配，如果不匹配，继续将最后一个字符截去进行匹配，直到有匹配为止。直到现在我们遇到的量词都是贪婪量词&lt;/li&gt;
  &lt;li&gt;用惰性量词进行匹配时，它首先将第一个字符当成一个匹配，如果成功则退出，如果失败，则测试前两个字符，依些增加，直到遇到合适的匹配为止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;惰性量词仅仅在贪婪量词后面加个”?”而已,如”a+”是贪婪匹配的,”a+?”则是惰性的 &lt;br /&gt;
构建一个验证电子邮箱地址有效性的正则表达式。电子邮箱地址有效性要求(我们姑且这样定义)：用户名只能包含字母数字以及下划线，最少一位，最多25位，用户名后面紧跟@，后面是域名，域名名称要求只能包含字母数字和减号（-），并且不能以减号开头或结尾，然后后面是域名后缀（可以有多个），域名后缀必须是点号连上2-4位英文字母 。&lt;/p&gt;
&lt;h3 id=&quot;javascript-1&quot;&gt;javascript正则表达式基本语法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;正则表达式基本语法&lt;br /&gt;
两个特殊的符号’^’和’$’。他们的作用是分别指出一个字符串的开始和结束。&lt;br /&gt;
例子如下：&lt;br /&gt;
“^The”：表示所有以”The”开始的字符串（”There”，”The cat”等）；&lt;br /&gt;
“of despair$”：表示所以以”of despair”结尾的字符串；&lt;br /&gt;
“^abc$”：表示开始和结尾都是”abc”的字符串——呵呵，只有”abc”自己了；&lt;br /&gt;
“notice”：表示任何包含”notice”的字符串。&lt;br /&gt;
象最后那个例子，如果你不使用两个特殊字符，你就在表示要查找的串在被查找串的任意部分——你并&lt;br /&gt;
不把它定位在某一个顶端。&lt;br /&gt;
其它还有’&lt;em&gt;‘，’+’和’?’这三个符号，表示一个或一序列字符重复出现的次数。&lt;br /&gt;
它们分别表示“没有或更多”，“一次或更多”还有“没有或一次”。&lt;br /&gt;
下面是几个例子：&lt;br /&gt;
“ab&lt;/em&gt;“：表示一个字符串有一个a后面跟着零个或若干个b。（”a”, “ab”, “abbb”,……）；&lt;br /&gt;
“ab+”：表示一个字符串有一个a后面跟着至少一个b或者更多；&lt;br /&gt;
“ab?”：表示一个字符串有一个a后面跟着零个或者一个b；&lt;br /&gt;
“a?b+$”：表示在字符串的末尾有零个或一个a跟着一个或几个b。&lt;br /&gt;
你也可以使用范围，用大括号括起，用以表示重复次数的范围。&lt;br /&gt;
“ab{2}”：表示一个字符串有一个a跟着2个b（”abb”）；&lt;br /&gt;
“ab{2,}”：表示一个字符串有一个a跟着至少2个b；&lt;br /&gt;
“ab{3,5}”：表示一个字符串有一个a跟着3到5个b。&lt;br /&gt;
请注意，你必须指定范围的下限（如：”{0,2}”而不是”{,2}”）。&lt;br /&gt;
还有，你可能注意到了，’&lt;em&gt;‘，’+’和’?’相当于”{0,}”，”{1,}”和”{0,1}”。&lt;br /&gt;
还有一个’¦’，表示“或”操作：&lt;br /&gt;
“hi¦hello”：表示一个字符串里有”hi”或者”hello”；&lt;br /&gt;
“(b¦cd)ef”：表示”bef”或”cdef”；&lt;br /&gt;
“(a¦b)&lt;/em&gt;c”：表示一串”a”“b”混合的字符串后面跟一个”c”；&lt;br /&gt;
‘.’可以替代任何字符：&lt;br /&gt;
“a.[0-9]”：表示一个字符串有一个”a”后面跟着一个任意字符和一个数字；&lt;br /&gt;
“^.{3}$”：表示有任意三个字符的字符串（长度为3个字符）；&lt;br /&gt;
方括号表示某些字符允许在一个字符串中的某一特定位置出现：&lt;br /&gt;
“[ab]”：表示一个字符串有一个”a”或”b”（相当于”a¦b”）；&lt;br /&gt;
“[a-d]”：表示一个字符串包含小写的’a’到’d’中的一个（相当于”a¦b¦c¦d”或者”[abcd]”）；&lt;br /&gt;
“^[a-zA-Z]”：表示一个以字母开头的字符串；&lt;br /&gt;
“[0-9]%”：表示一个百分号前有一位的数字；&lt;br /&gt;
“,[a-zA-Z0-9]$”：表示一个字符串以一个逗号后面跟着一个字母或数字结束。&lt;br /&gt;
你也可以在方括号里用’^’表示不希望出现的字符，’^’应在方括号里的第一位。&lt;br /&gt;
（如：”%[^a-zA-Z]%”表示两个百分号中不应该出现字母）。&lt;br /&gt;
为了逐字表达，你必须在”^.$()¦*+?{&quot;这些字符前加上转移字符’&#39;。&lt;br /&gt;
请注意在方括号中，不需要转义字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正则表达式验证控制文本框的输入字符类型&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;只能输入数字和英文的：
        &lt;pre&gt;&lt;code&gt;&amp;lt;input onkeyup=&quot;value=value.replace(/[\W]/g,&#39;&#39;) &quot; onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^\d]/g,&#39;&#39;))&quot; ID=&quot;Text1&quot; NAME=&quot;Text1&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;只能输入数字的：
        &lt;pre&gt;&lt;code&gt; &amp;lt;input onkeyup=&quot;value=value.replace(/[^\d]/g,&#39;&#39;) &quot; onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^\d]/g,&#39;&#39;))&quot; ID=&quot;Text2&quot; NAME=&quot;Text2&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;只能输入汉字的：
        &lt;pre&gt;&lt;code&gt;&amp;lt;input onkeyup=&quot;value=value.replace(/[^\u4E00-\u9FA5]/g,&#39;&#39;)&quot; onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^\u4E00-\u9FA5]/g,&#39;&#39;))&quot; ID=&quot;Text4&quot; NAME=&quot;Text4&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;正则表达式的应用实例通俗说明&lt;br /&gt;
//校验是否全由数字组成&lt;br /&gt;
/^[0-9]{1,20}$/&lt;br /&gt;
^ 表示打头的字符要匹配紧跟^后面的规则&lt;br /&gt;
$ 表示打头的字符要匹配紧靠$前面的规则&lt;br /&gt;
[ ] 中的内容是可选字符集&lt;br /&gt;
[0-9] 表示要求字符范围在0-9之间&lt;br /&gt;
{1,20}表示数字字符串长度合法为1到20，即为[0-9]中的字符出现次数的范围是1到20次。&lt;br /&gt;
/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。&lt;br /&gt;
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验登录名：只能输入5-20个以字母开头、可带数字、“&lt;em&gt;”、“.”的字串&lt;br /&gt;
/^[a-zA-Z]{1}([a-zA-Z0-9]|[.&lt;/em&gt;]){4,19}$/&lt;br /&gt;
^[a-zA-Z]{1} 表示第一个字符要求是字母。&lt;br /&gt;
([a-zA-Z0-9]|[.&lt;em&gt;]){4,19} 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集[.&lt;/em&gt;]组成。&lt;br /&gt;
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验用户姓名：只能输入1-30个以字母开头的字串&lt;br /&gt;
/^[a-zA-Z]{1,30}$/ &lt;br /&gt;
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验密码：只能输入6-20个字母、数字、下划线&lt;br /&gt;
/^(\w){6,20}$/&lt;br /&gt;
\w：用于匹配字母，数字或下划线字符 &lt;br /&gt;
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”&lt;br /&gt;
/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/&lt;br /&gt;
\d：用于匹配从0到9的数字；&lt;br /&gt;
“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次&lt;br /&gt;
可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等&lt;br /&gt;
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验URL&lt;br /&gt;
/^http[s]{0,1}:\/\/.+$/ 或 /^http[s]{0,1}:\/\/.{1,n}$/ (表示url串的长度为length(“https://”) + n )&lt;br /&gt;
 \ / ：表示字符“/”。&lt;br /&gt;
. 表示所有字符的集&lt;/li&gt;
  &lt;li&gt;等同于{1,}，就是1到正无穷吧。&lt;br /&gt;
 &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*&lt;br /&gt;
//校验纯中文字符&lt;br /&gt;
/&lt;br /&gt;
^[\u4E00-\u9FA5]+$/&lt;br /&gt;
[\u4E00-\u9FA5] ：估计是中文字符集的范围吧&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascript-2&quot;&gt;javascript正则表达式实例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;判断输入内容是否为空
    &lt;pre&gt;&lt;code&gt; function IsNull(){    
  var str = document.getElementById(&#39;str&#39;).value.trim();    
  if(str.length==0){    
      alert(&#39;对不起，文本框不能为空或者为空格!&#39;);//请将“文本框”改成你需要验证的属性名称!    
  }    
}    
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的字符是否为英文字母
    &lt;pre&gt;&lt;code&gt;function IsLetter()     
{     
      var str = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^[a-zA-Z]+$/;     
      if(!reg.test(str)){    
          alert(&quot;对不起，您输入的英文字母类型格式不正确!&quot;);//请将“英文字母类型”改成你需要验证的属性名称!    
      }    
      }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的字符是否为整数
    &lt;pre&gt;&lt;code&gt;function IsInteger()     
{       
      var str = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^[-+]?\d*$/;     
      if(!reg.test(str)){    
          alert(&quot;对不起，您输入的整数类型格式不正确!&quot;);//请将“整数类型”要换成你要验证的那个属性名称！    
      }    
      }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的字符是否为:a-z,A-Z,0-9
    &lt;pre&gt;&lt;code&gt; function IsString()     
{     
      var str = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^[a-zA-Z0-9_]+$/;     
      if(!reg.test(str)){    
          alert(&quot;对不起，您输入的字符串类型格式不正确!&quot;);//请将“字符串类型”要换成你要验证的那个属性名称！    
      }    
      }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的字符是否为中文
    &lt;pre&gt;&lt;code&gt;function IsChinese()     
{     
      var str = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^[\u0391-\uFFE5]+$/;    
      if(!reg.test(str)){    
          alert(&quot;对不起，您输入的字符串类型格式不正确!&quot;);//请将“字符串类型”要换成你要验证的那个属性名称！    
      }    
      }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的EMAIL格式是否正确
    &lt;pre&gt;&lt;code&gt; function IsEmail()     
{     
      var str = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;    
      if(!reg.test(str)){    
          alert(&quot;对不起，您输入的字符串类型格式不正确!&quot;);//请将“字符串类型”要换成你要验证的那个属性名称！    
      }    
      }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;判断输入的数字不大于某个特定的数字
    &lt;pre&gt;&lt;code&gt;function MaxValue()     
{     
  var val = document.getElementById(&#39;str&#39;).value.trim();    
      if(str.length!=0){    
      reg=/^[-+]?\d*$/;     
      if(!reg.test(str)){//判断是否为数字类型    
          if(val&amp;gt;parseInt(&#39;123&#39;)) //“123”为自己设定的最大值    
          {     
              alert(&#39;对不起，您输入的数字超出范围&#39;);//请将“数字”改成你要验证的那个属性名称！    
          }     
      }    
  }    
}     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;几个常用正则&lt;/h3&gt;

&lt;p&gt;Phone : /^(((\d{2,3}))|(\d{3}-))?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}(-\d{1,4})?$/    &lt;br /&gt;
 Mobile : /^(((\d{2,3}))|(\d{3}-))?13\d{9}$/    &lt;br /&gt;
 Url : /^http:\/\/[A-Za-z0-9]+.[A-Za-z0-9]+[\/=\?%-&amp;amp;_~`@[]&#39;:+!]&lt;em&gt;([^&amp;lt;&amp;gt;&quot;&quot;])&lt;/em&gt;$/   &lt;br /&gt;
 IdCard : /^\d{15}(\d{2}[A-Za-z0-9])?$/   &lt;br /&gt;
 QQ : /^[1-9]\d{4,8}$/   &lt;br /&gt;
 某种特殊金额：/^((\d{1,3}(,\d{3})&lt;em&gt;)|(\d+))(.\d{2})?$/               //说明：除“XXX    XX,XXX    XX,XXX.00”格式外&lt;br /&gt;
//为上面提供各个JS验证方法提供.trim()属性   &lt;br /&gt;
String.prototype.trim=function(){   &lt;br /&gt;
        return this.replace(/(^\s&lt;/em&gt;)|(\s*$)/g, “”);    &lt;br /&gt;
    }&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/jszhengze/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/jszhengze/</guid>
        
        <category>javascript</category>
        
        <category>前端</category>
        
        <category>正则</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>javascript ajax「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;javascript-ajax&quot;&gt;javascript ajax&lt;/h3&gt;

&lt;h2 id=&quot;ajax&quot;&gt;什么是AJAX&lt;/h2&gt;

&lt;p&gt;AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。&lt;br /&gt;
AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。&lt;br /&gt;
AJAX 是一种用于创建快速动态网页的技术。&lt;br /&gt;
通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&lt;br /&gt;
传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。&lt;/p&gt;

&lt;h2 id=&quot;ajax-1&quot;&gt;AJAX优势&lt;/h2&gt;

&lt;p&gt;AJAX不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。&lt;br /&gt;
使用Javascript向服务器提出请求并处理响应而不阻塞用户！核心对象XMLHTTPRequest。通过这个对象，您的 JavaScript 可在不重载页面的情况与Web服务器交换数据，即在不需要刷新页面的情况下，就可以产生局部刷新的效果。&lt;br /&gt;
AJAX 在浏览器与 Web 服务器之间使用异步数据传输（HTTP 请求），这样就可使网页从服务器请求少量的信息，而不是整个页面。&lt;br /&gt;
AJAX 可使因特网应用程序更小、更快，更友好。&lt;br /&gt;
AJAX 是一种独立于 Web 服务器软件的浏览器技术。　AJAX 基于下列 Web 标准：&lt;br /&gt;
JavaScriptXMLHTMLCSS在 AJAX 中使用的 Web 标准已被良好定义，并被所有的主流浏览器支持。AJAX 应用程序独立于浏览器和平台。&lt;br /&gt;
Web 应用程序较桌面应用程序有诸多优势；它们能够涉及广大的用户，它们更易安装及维护，也更易开发。&lt;br /&gt;
不过，因特网应用程序并不像传统的桌面应用程序那样完善且友好。&lt;br /&gt;
通过 AJAX，因特网应用程序可以变得更完善，更友好。&lt;/p&gt;

&lt;h3 id=&quot;ajax-2&quot;&gt;AJAX的几种方式&lt;/h3&gt;

&lt;p&gt;ajax的技术核心是 XMLHttpRequest 对象；&lt;br /&gt;
ajax 请求过程：创建 XMLHttpRequest 对象、连接服务器、发送请求、接收响应数据；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建对象&lt;br /&gt;
new XMLHttpRequest();&lt;/li&gt;
  &lt;li&gt;连接和发送
    &lt;ul&gt;
      &lt;li&gt;open()函数的三个参数：请求方式、请求地址、是否异步请求(同步请求的情况极少，至今还没用到过)；&lt;/li&gt;
      &lt;li&gt;GET 请求方式是通过URL参数将数据提交到服务器的，POST则是通过将数据作为 send 的参数提交到服务器；&lt;/li&gt;
      &lt;li&gt;POST 请求中，在发送数据之前，要设置表单提交的内容类型；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;接收
    &lt;ul&gt;
      &lt;li&gt;接收到响应后，响应的数据会自动填充XHR对象，相关属性如下&lt;br /&gt;
responseText：响应返回的主体内容，为字符串类型；&lt;br /&gt;
responseXML：如果响应的内容类型是 “text/xml” 或 “application/xml”，这个属性中将保存着相应的xml 数据，是 XML 对应的 document 类型；&lt;br /&gt;
status：响应的HTTP状态码；&lt;br /&gt;
statusText：HTTP状态的说明；&lt;/li&gt;
      &lt;li&gt;XHR对象的readyState属性表示请求/响应过程的当前活动阶段，这个属性的值如下
        &lt;ul&gt;
          &lt;li&gt;0-未初始化，尚未调用open()方法；&lt;/li&gt;
          &lt;li&gt;1-启动，调用了open()方法，未调用send()方法；&lt;/li&gt;
          &lt;li&gt;2-发送，已经调用了send()方法，未接收到响应；&lt;/li&gt;
          &lt;li&gt;3-接收，已经接收到部分响应数据；&lt;/li&gt;
          &lt;li&gt;4-完成，已经接收到全部响应数据；&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;javascript/js的ajax的GET请求代码如下所示：
    &lt;pre&gt;&lt;code&gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt; 
/* 创建 XMLHttpRequest 对象 */
var xmlHttp; 
function GetXmlHttpObject(){ 
　　if (window.XMLHttpRequest){ 
　　　　// code for IE7+, Firefox, Chrome, Opera, Safari 
　　　　xmlhttp=new XMLHttpRequest(); 
　　}else{// code for IE6, IE5 
　　　　xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 
　　} 
　　return xmlhttp; 
} 
// -----------ajax方法-----------// 
function getLabelsGet(){ 
　　xmlHttp=GetXmlHttpObject(); 
　　if (xmlHttp==null){ 
　　　　alert(&#39;您的浏览器不支持AJAX！&#39;); 
　　　　return; 
　　} 
　　var id = document.getElementById(&#39;id&#39;).value; 
　　var url=&quot;http://www.Leefrom.com?id=&quot;+id+&quot;&amp;amp;t/&quot;+Math.random(); 
　　xmlHttp.open(&quot;GET&quot;,url,true); 
　　xmlHttp.onreadystatechange=favorOK;//发送事件后，收到信息了调用函数 
　　xmlHttp.send(); 
}
function getOkGet(){ 
　　if(xmlHttp.readyState==1||xmlHttp.readyState==2||xmlHttp.readyState==3){ 
　　　　// 本地提示：加载中 
　　} 
　　if (xmlHttp.readyState==4 &amp;amp;&amp;amp; xmlHttp.status==200){ 
　　　　var d= xmlHttp.responseText; 
　　　　// 处理返回结果 
　　} 
} 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;javascript/js的ajax的POST请求：
    &lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt; 
/* 创建 XMLHttpRequest 对象 */
var xmlHttp; 
function GetXmlHttpObject(){ 
if (window.XMLHttpRequest){ 
// code for IE7+, Firefox, Chrome, Opera, Safari 
xmlhttp=new XMLHttpRequest(); 
}else{// code for IE6, IE5 
xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 
} 
return xmlhttp; 
} 
// -----------ajax方法-----------// 
function getLabelsPost(){ 
xmlHttp=GetXmlHttpObject(); 
if (xmlHttp==null){ 
alert(&#39;您的浏览器不支持AJAX！&#39;); 
return; 
} 
var url=&quot;http://www.lifefrom.com/t/&quot;+Math.random(); 
xmlhttp.open(&quot;POST&quot;,url,true); 
xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;); 
xmlhttp.send(); 
xmlHttp.onreadystatechange=getLabelsOK;//发送事件后，收到信息了调用函数 
} 
function getOkPost(){ 
if(xmlHttp.readyState==1||xmlHttp.readyState==2||xmlHttp.readyState==3){ 
// 本地提示：加载中/处理中 
} 
if (xmlHttp.readyState==4 &amp;amp;&amp;amp; xmlHttp.status==200){ 
var d=xmlHttp.responseText; // 返回值 
// 处理返回值 
} 
} 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/jsajax/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/11/01/jsajax/</guid>
        
        <category>javascript</category>
        
        <category>数据交互</category>
        
        <category>ajax</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>浅谈javascript「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;javascript&quot;&gt;javascript简介&lt;/h3&gt;

&lt;p&gt;JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，&lt;br /&gt;
广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。在1995年时，由Netscape公司&lt;br /&gt;
的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。&lt;br /&gt;
但实际上它的语法风格与Self及Scheme较为接近。为了取得技术优势，微软推出了JScript，CEnvi推出ScriptEase，与JavaScript同样可在浏览器上运行。&lt;br /&gt;
为了统一规格，因为JavaScript兼容于ECMA标准，因此也称为ECMAScript。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基本特点&lt;/p&gt;

    &lt;p&gt;JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。&lt;br /&gt;
  1.是一种解释性脚本语言（代码不进行预编译）。&lt;br /&gt;
  2.主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。&lt;br /&gt;
  3.可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。&lt;br /&gt;
  4.跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日常用途&lt;/p&gt;

    &lt;p&gt;1.嵌入动态文本于HTML页面。&lt;br /&gt;
  2.对浏览器事件做出响应。&lt;br /&gt;
  3.读写HTML元素。&lt;br /&gt;
  4.在数据被提交到服务器之前验证数据。&lt;br /&gt;
  5.检测访客的浏览器信息。&lt;br /&gt;
  6.控制cookies，包括创建和修改等。&lt;br /&gt;
  7.基于Node.js技术进行服务器端编程。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascript-1&quot;&gt;javascript语法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;运算符：有7类运算符，分别为：
    &lt;ul&gt;
      &lt;li&gt;赋值运算符（=，+=，-=，*=，/=，%=，«=,»=,&lt;code&gt;|&lt;/code&gt;=,&amp;amp;=);&lt;/li&gt;
      &lt;li&gt;算术运算符（+, -,*,/,%,++,–);&lt;/li&gt;
      &lt;li&gt;比较运算符（&amp;gt;,&amp;lt;,&amp;lt;=,&amp;gt;=,=,!=);&lt;/li&gt;
      &lt;li&gt;逻辑运算符（&lt;code&gt;|&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;,&amp;amp;&amp;amp;,!);&lt;/li&gt;
      &lt;li&gt;条件运算符（?:);&lt;/li&gt;
      &lt;li&gt;位运算符（&lt;code&gt;|&lt;/code&gt;, &amp;amp; , « ,»,~,^);&lt;/li&gt;
      &lt;li&gt;字符串运算符（+).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;表达式：有4类表达式，分别为：
    &lt;ul&gt;
      &lt;li&gt;赋值表达式，&lt;/li&gt;
      &lt;li&gt;算术表达式，&lt;/li&gt;
      &lt;li&gt;布尔表达式，&lt;/li&gt;
      &lt;li&gt;字符串表达式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;变量：变量有以下类型：
    &lt;ul&gt;
      &lt;li&gt;object(对象）,&lt;/li&gt;
      &lt;li&gt;array(数组）,&lt;/li&gt;
      &lt;li&gt;number(数），&lt;/li&gt;
      &lt;li&gt;boolean(布尔值）,&lt;/li&gt;
      &lt;li&gt;null(空值)，&lt;/li&gt;
      &lt;li&gt;undefined(没有定义和赋值的变量），&lt;/li&gt;
      &lt;li&gt;string(字符串）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;变量定义用var关键字。&lt;/p&gt;

&lt;h3 id=&quot;javascript-2&quot;&gt;javascript使用方法&lt;/h3&gt;

&lt;p&gt;通过&lt;script&gt;&lt;/script&gt;可以装饰js脚本嵌入到网页中，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;script language=&quot;javascript&quot;&amp;gt;
 document.write(&quot;这是JavaScript&quot;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../img/blog/20161031/result.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;引用方式：&lt;br /&gt;
 &lt;img src=&quot;../../../../img/blog/20161031/1.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/31/javascript/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/31/javascript/</guid>
        
        <category>javascript</category>
        
        <category>前端</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>Session&amp;Cookie「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;session&quot;&gt;Session&lt;/h3&gt;
&lt;p&gt;Session:在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在 Session 对象中。有关使用 Session 对象的详细信息，请参阅“ASP 应用程序”部分的“管理会话”。注意 会话状态仅在支持 cookie 的浏览器中保留。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;工作原理&lt;br /&gt;
（1）当一个session第一次被启用时，一个唯一的标识被存储于本地的cookie中。&lt;br /&gt;
（2）首先使用session_start()函数，PHP从session仓库中加载已经存储的session变量。&lt;br /&gt;
（3）当执行PHP脚本时，通过使用session_register()函数注册session变量。&lt;br /&gt;
（4）当PHP脚本执行结束时，未被销毁的session变量会被自动保存在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.save_path指定，下次浏览网页时可以加载使用。&lt;/li&gt;
  &lt;li&gt;PHP使用Session&lt;br /&gt;
原生态php的session简单使用如下：&lt;br /&gt;
sesstion_start();                // 首先开启session&lt;br /&gt;
$_SESSION[‘user’] = ‘username’;  // 把username存在$_SESSION[‘user’] 里面&lt;br /&gt;
echo $_SESSION[‘user’];          // 直接输出 username&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;session_destroy();               // 销毁session&lt;/p&gt;

&lt;h3 id=&quot;cookie&quot;&gt;Cookie&lt;/h3&gt;
&lt;p&gt;Cookie 是在 HTTP 协议下，服务器或脚本可以维护客户工作站上信息的一种方式。Cookie 是由 Web 服务器保存在用户浏览器（客户端）上的小文本文件，它可以包含有关用户的信息。无论何时用户链接到服务器，Web 站点都可以访问 Cookie 信息 。&lt;br /&gt;
目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。&lt;br /&gt;
持续的 Cookie 则保存在用户的 Cookie 文件中，下一次用户返回时，仍然可以对它进行调用。在 Cookie 文件中保存 Cookie，有些用户担心 Cookie 中的用户信息被一些别有用心的人窃取，而造成一定的损害。其实，网站以外的用户无法跨过网站来获得 Cookie 信息。如果因为这种担心而屏蔽 Cookie，肯定会因此拒绝访问许多站点页面。因为，当今有许多 Web 站点开发人员使用 Cookie 技术，例如 Session 对象的使用就离不开 Cookie 的支持。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;工作原理&lt;br /&gt;
要了解Cookie，必不可少地要知道它的工作原理。一般来说，Cookie通过HTTP Headers从服务器端返回到浏览器上。&lt;br /&gt;
首先，服务器端在响应中利用Set-Cookie header来创建一个Cookie ，然后，浏览器在它的请求中通过Cookie header包含这个已经创建的Cookie，并且把它返回至服务器，从而完成浏览器的论证。&lt;br /&gt;
例如，我们创建了一个名字为login的Cookie来包含访问者的信息，创建Cookie时，服务器端的Header如下面所示，这里假设访问者的注册名是“Michael Jordan”，同时还对所创建的Cookie的属性如pathdomain、expires等进行了指定。&lt;br /&gt;
expires=Monday,01-Mar-99 00:00:01 GMT&lt;br /&gt;
上面这个Header会自动在浏览器端计算机的Cookie文件中添加一条记录。浏览器将变量名为“login”的Cookie赋值为“Michael Jordon”。注意，在实际传递过程中这个Cookie的值是经过了URLEncode方法的URL编码操作的。这个含有Cookie值的HTTP Header被保存到浏览器的Cookie文件后，Header就通知浏览器将Cookie通过请求以忽略路径的方式返回到服务器，完成浏览器的认证操作。&lt;br /&gt;
此外，我们使用了Cookie的一些属性来限定该Cookie的使用。例如Domain属性能够在浏览器端对Cookie发送进行限定，具体到上面的例子，该Cookie只能传送到指定的服务器上，而决不会跑到其他的Web站点上去。Expires属性则指定了该Cookie保存的时间期限，例如上面的Cookie在浏览器上只保存到1999年3月1日1秒。当然，如果浏览器上Cookie 太多，超过了系统所允许的范围，浏览器将自动对它进行删除。至于属性Path，用来指定Cookie将被发送到服务器的哪一个目录路径下。&lt;br /&gt;
说明：浏览器创建了一个Cookie后，对于每一个针对该网站的请求，都会在Header中带着这个Cookie；不过，对于其他网站的请求Cookie是绝对不会跟着发送的。而且浏览器会这样一直发送，直到Cookie过期为止。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PHP使用Cookie&lt;br /&gt;
setcookie(name, value, expire, path, domain, secure)    &lt;br /&gt;
name 必需。规定 cookie 的名称。&lt;br /&gt;
value 必需。规定 cookie 的值。&lt;br /&gt;
expire 可选。规定 cookie 的有效期。&lt;br /&gt;
path 可选。规定 cookie 的服务器路径。&lt;br /&gt;
domain 可选。规定 cookie 的域名。&lt;br /&gt;
secure 可选。规定是否通过安全的 HTTPS 连接来传输 cookie。&lt;br /&gt;
可以通过 $HTTP_COOKIE_VARS[“user”] 或 $_COOKIE[“user”] 来访问名为 “user” 的 cookie 的值。在发送 cookie 时，cookie 的值会自动进行 URL 编码。接收时会进行 URL 解码。如果不需要这样，可以使用 setrawcookie() 代替。&lt;br /&gt;
```&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;?php    
      $value = &quot;my cookie value&quot;;    
      // 发送一个简单的 cookie    
      setcookie(&quot;TestCookie&quot;,$value);    
  ?&amp;gt;    
  &amp;lt;?php    
      $value = &quot;my cookie value&quot;;    
      // 发送一个 24 小时候过期的 cookie    
      setcookie(&quot;TestCookie&quot;,$value, time()+3600*24);    
  ?&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;h3 id=&quot;sessioncookie&quot;&gt;Session&amp;amp;Cookie区别&lt;/h3&gt;
&lt;p&gt;1.cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。&lt;br /&gt;
2.session其实指的就是访问者从到达某个特定主页到离开为止的那段时间。 Session其实是利用Cookie进行信息处理的，当用户首先进行了请求后，服务端就在用户浏览器上创建了一个Cookie，当这个Session结束时，其实就是意味着这个Cookie就过期了。&lt;br /&gt;
注：为这个用户创建的Cookie的名称是aspsessionid。这个Cookie的唯一目的就是为每一个用户提供不同的身份认证。&lt;br /&gt;
3.cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。&lt;br /&gt;
4.cookie 和session的区别是：cookie数据保存在客户端，session数据保存在服务器端。&lt;br /&gt;
5.两个都可以用来存私密的东西，同样也都有有效期的说法,区别在于session是放在服务器上的，过期与否取决于服务期的设定，cookie是存在客户端的，过去与否可以在cookie生成的时候设置进去。&lt;br /&gt;
(1)cookie数据存放在客户的浏览器上，session数据放在服务器上&lt;br /&gt;
(2)cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session&lt;br /&gt;
(3)session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE&lt;br /&gt;
(4)单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。&lt;br /&gt;
(5)所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/29/session-cookie/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/29/session-cookie/</guid>
        
        <category>存储</category>
        
        <category>Session</category>
        
        <category>Cookie</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>MySql:解读MySql「原」</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mysql-&quot;&gt;MySql （关系型数据库管理系统）&lt;/h3&gt;
&lt;p&gt;MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。&lt;br /&gt;
MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。&lt;br /&gt;
MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，它分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。&lt;br /&gt;
由于其社区版的性能卓越，搭配 PHP 和 Apache 可组成良好的开发环境。&lt;/p&gt;

&lt;h3 id=&quot;phpmysql&quot;&gt;PHP&amp;amp;&amp;amp;MySql连接数据库&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MySql
    &lt;pre&gt;&lt;code&gt;  //语法
  mysql_connect(servername,username,password);
  //例子
      &amp;lt;?php
          $con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;);
          if (!$con)
            {
            die(&#39;Could not connect: &#39; . mysql_error());
            }
          // some code
          mysql_close($con);//关闭数据库
      ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;MySqli&lt;br /&gt;
  Mysqli是php5之后才有的功能，没有开启扩展的朋友可以打开您的php.ini的配置文件。&lt;br /&gt;
  查找下面的语句：;extension=php_mysqli.dll将其修改为：extension=php_mysqli.dll即可。&lt;br /&gt;
  相对于mysql有很多新的特性和优势&lt;br /&gt;
  （1）支持本地绑定、准备（prepare）等语法&lt;br /&gt;
  （2）执行sql语句的错误代码&lt;br /&gt;
  （3）同时执行多个sql&lt;br /&gt;
  （4）另外提供了面向对象的调用接口的方法。 &lt;br /&gt;
    使用方法一：使用传统的面向过程的方法
    &lt;pre&gt;&lt;code&gt;        &amp;lt;?php
          $connect = mysqli_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;&#39;,&#39;volunteer&#39;) or die(&#39;Unale to connect&#39;);
          $sql = &quot;select * from vol_msg&quot;;
          $result = mysqli_query($connect,$sql);
          while($row = mysqli_fetch_row($result)){
          echo $row[0];
          }
        ?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;使用方法二：使用面向对象的方法调用接口（推荐使用）&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;&amp;lt;?php
  //创建对象并打开连接，最后一个参数是选择的数据库名称
  $mysqli = new mysqli(&#39;localhost&#39;,&#39;root&#39;,&#39;&#39;,&#39;volunteer&#39;);
  //检查连接是否成功
  if (mysqli_connect_errno()){
  //注意mysqli_connect_error()新特性
  die(&#39;Unable to connect!&#39;). mysqli_connect_error();
  }
  $sql = &quot;select * from vol_msg&quot;;
  //执行sql语句，完全面向对象的
  $result = $mysqli-&amp;gt;query($sql);
  while($row = $result-&amp;gt;fetch_array()){
  echo $row[0];
  }
?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;PDO&lt;br /&gt;
  PDO是PHP 5新加入的一个重大功能，因为在PHP 5以前的php4/php3都是一堆的数据库扩展来跟各个数据库的连接和处理，什么 php_mysql.dll、php_pgsql.dll、php_mssql.dll、php_sqlite.dll等等扩展来连接MySQL、PostgreSQL、MS SQL Server、SQLite，同样的，我们必须借助 ADOdb、PEAR::DB、PHPlib::DB之类的数据库抽象类来帮助我们，无比烦琐和低效，毕竟，php代码的效率怎么能够我们直接用C/C++写的扩展斜率高捏？所以嘛，PDO的出现是必然的，大家要平静学习的心态去接受使用，也许你会发现能够减少你不少功夫哦。
    &lt;pre&gt;&lt;code&gt;  &amp;lt;?php
      $dbms=&#39;mysql&#39;;     //数据库类型
      $host=&#39;localhost&#39;; //数据库主机名
      $dbName=&#39;test&#39;;    //使用的数据库
      $user=&#39;root&#39;;      //数据库连接用户名
      $pass=&#39;&#39;;          //对应的密码
      $dsn=&quot;$dbms:host=$host;dbname=$dbName&quot;;

      try {
          $dbh = new PDO($dsn, $user, $pass); //初始化一个PDO对象
          echo &quot;连接成功&amp;lt;br/&amp;gt;&quot;;
          /*你还可以进行一次搜索操作
          foreach ($dbh-&amp;gt;query(&#39;SELECT * from FOO&#39;) as $row) {
              print_r($row); //你可以用 echo($GLOBAL); 来看到这些值
          }
          */
          $dbh = null;
      } catch (PDOException $e) {
          die (&quot;Error!: &quot; . $e-&amp;gt;getMessage() . &quot;&amp;lt;br/&amp;gt;&quot;);
      }
      //默认这个不是长连接，如果需要数据库长连接，需要最后加一个参数：array(PDO::ATTR_PERSISTENT =&amp;gt; true) 变成这样：
      $db = new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT =&amp;gt; true));

  ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;h3 id=&quot;phpmysql-1&quot;&gt;PHP&amp;amp;&amp;amp;MySql操作数据库&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;MySql
    &lt;pre&gt;&lt;code&gt;  1、PHP连接MySQL数据库
  &amp;lt;?php
      $host =&quot;localhost&quot;;//服务器地址
      $root =&quot;root&quot;;//用户名
      $password =&quot;admin&quot;;//密码
      $database =&quot;beyondweb_test&quot;;//数据库名
	                     
      $conn = mysql_connect($host,$root,$password);//连接数据库
      if(!$conn){
          die(&quot;数据库连接失败!&quot;.mysql_error());
      }else{
          echo&quot;数据库连接成功&quot;;
      }
	                         
      mysql_select_db($database,$conn);//选择数据库
      mysql_query(&quot;set names utf-8&quot;);//设置编码为utf-8
  ?&amp;gt;

  2、向数据库中增加数据
  SQL语句：	
  CREATE TABLE user(
      id INT(20) PRIMARY KEY AUTO_INCREMENT,
      nikename VARCHAR(30),
      email VARCHAR(40)
  );

  然后来向数据库中添加数据：
  &amp;lt;?php
      $query =&quot;INSERT INTO user(nikename,email) VALUES(#张三#,#beyondwebdotcn@xxx.com#);&quot;;//#号代表单引号，使用单引号才是正确的
	                   
      $result = mysql_query($query);
	                   
      if(!$result){
          echo&quot;Error!&quot;;
      }else{
          echo&quot;Success!&quot;;
          mysql_close($conn);//关闭数据库连接
      }
  ?&amp;gt;

  3、修改数据库中的数据

  我们还基于user表进行操作，例如把“张三”改为“李四”，php代码如下：
  &amp;lt;?php
      $query =&quot;UPDATE user SET nikename=#李四# WHERE id=#1#;&quot;;//#号代表单引号，使用单引号才是正确的
	                 
      $result = mysql_query($query);
	                 
      if(!$result){
          echo&quot;Error!&quot;;
      }else{
          echo&quot;Success!&quot;;
          mysql_close($conn);//关闭数据库连接
      }
  ?&amp;gt;

  其实也就是SQL语句变了，其它是完全一样的。

  4、查询数据库

  只需更换一下SQL语句就行了，如查询表内所有数据并以表格形式输出：
  &amp;lt;?php
      $query =&quot;SELECT * FROM user;&quot;;
	            
      $result = mysql_query($query);
	            
      if(!$result){
          echo&quot;Error!&quot;;
      }else{
          echo&quot;Success!&quot;;
      }
	            
  ?&amp;gt;
      &amp;lt;br/&amp;gt;
      &amp;lt;table border=&quot;1px&quot;&amp;gt;
          &amp;lt;tr&amp;gt;
              &amp;lt;th&amp;gt;id&amp;lt;/th&amp;gt;
              &amp;lt;th&amp;gt;nikename&amp;lt;/th&amp;gt;
              &amp;lt;th&amp;gt;email&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
  &amp;lt;?php
      while($row = mysql_fetch_row($result)){
          echo&quot;&amp;lt;tr&amp;gt;&quot;;
          echo&quot;&amp;lt;td&amp;gt;&quot;.$row[0].&quot;&amp;lt;/td&amp;gt;&quot;;
          echo&quot;&amp;lt;td&amp;gt;&quot;.$row[1].&quot;&amp;lt;/td&amp;gt;&quot;;
          echo&quot;&amp;lt;td&amp;gt;&quot;.$row[2].&quot;&amp;lt;/td&amp;gt;&quot;;
          echo&quot;&amp;lt;/tr&amp;gt;&quot;;
      }
  ?&amp;gt;
      &amp;lt;/table&amp;gt;
  &amp;lt;?php
	            
      mysql_close($conn);
	            
  ?&amp;gt;

  5、删除数据

  前面已经给出了增加数据、修改数据、删除数据的解决方法，那么“增删改查”就剩一个“删”了，下面我们就来看一下删除数据是怎么回事，其实跟上面差不多，一句话的事儿，改个SQL语句就行了。来看PHP代码：	
  &amp;lt;?php
      $query =&quot;DELETE FROM user WHERE nikename=#张三#;&quot;;//#号代表单引号，使用单引号才是正确的
	            
      $result = mysql_query($query);
	            
      if(!$result){
          echo&quot;Error!&quot;;
      }else{
          echo&quot;Success!&quot;;
          mysql_close($conn);//关闭数据库连接
      }
  ?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;参考地址：(http://www.php1.cn/article/8166.html)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;MySqli
    &lt;pre&gt;&lt;code&gt; 1.mysqli扩展库操作数据库工具类

  &amp;lt;?php
   //数据库操作类
    class DBUtil{
     private $host=&quot;localhost&quot;;
     private $username=&quot;root&quot;;
     private $password=&quot;123456&quot;;
     private $dbname=&quot;student&quot;;
     private $conn;
     public function DBUtil(){
       $this-&amp;gt;conn=new mysqli($this-&amp;gt;host, $this-&amp;gt;username, $this-&amp;gt;password,$this-&amp;gt;dbname) or die($this-&amp;gt;conn-&amp;gt;connect_error);
	    
     }
    //查询
     public function query($sql){
       $all= $this-&amp;gt;conn-&amp;gt;query($sql);
       return $all;
     }
    //插入,修改，删除
     public function otherOperate($sql){
        if($this-&amp;gt;conn-&amp;gt;query($sql)){
          if($this-&amp;gt;conn-&amp;gt;affected_rows&amp;gt;0){
             return &quot;OK&quot;;
          }else{
             return &quot;ERROOR&quot;;
          }
        }
     }
     public function close(){
       $this-&amp;gt;conn-&amp;gt;close();
     }
    }
  ?&amp;gt;

  2.下面是具体的调用工具类的代码

  &amp;lt;?php
    require_once &quot;MySQLUtil.php&quot;;
     /*$sql=&quot;select * from m_student&quot;;
     $util=new DBUtil();
     $result=$util-&amp;gt;query($sql);
     while($row=$result-&amp;gt;fetch_assoc()){
     	 echo &quot;$row[stuName]&quot;.&quot;&amp;lt;/br&amp;gt;&quot;;
     }
     $result-&amp;gt;free();
     $util-&amp;gt;close();*/
     $sql=&quot;update m_student set stuName=&#39;杨幂&#39; where id=3&quot;;
     $util=new DBUtil();
     $result=$util-&amp;gt;otherOperate($sql);
     echo $result;
     $util-&amp;gt;close();
  ?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;参考地址：(http://www.xuebuyuan.com/1637846.html)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;PDO
    &lt;pre&gt;&lt;code&gt;//查询
 public function fetchAll($sql, $searchData = array(), $limit = array(0, 10), $dataMode = PDO::FETCH_ASSOC, $preType = array(PDO::ATTR_CURSOR =&amp;gt; PDO::CURSOR_FWDONLY)) {  
  if ($sql) {  
    $sql .= &#39; limit &#39; . (int) $limit[0] . &#39;,&#39; . (intval($limit[1]) &amp;gt; 0 ? intval($limit[1]) : 10);  
    $pdoStatement = $this-&amp;gt;pdo-&amp;gt;prepare($sql, $preType);  
    $pdoStatement-&amp;gt;execute($searchData);  
    return $data = $pdoStatement-&amp;gt;fetchAll($dataMode);  
  } else {  
    return false;  
  }  
}  
//添加 
public function insert($tableName, $data, $returnInsertId = false, $replace = false) {  
  if(!empty($tableName) &amp;amp;&amp;amp; count($data) &amp;gt; 0){  
    $sql = $replace ? &#39;REPLACE INTO &#39; : &#39;INSERT INTO &#39;;  
    list($setSql, $mapData) = $this-&amp;gt;FDFields($data);  
    $sql .= $tableName . &#39; set &#39; . $setSql;  
    $pdoStatement = $this-&amp;gt;pdo-&amp;gt;prepare($sql, array(PDO::ATTR_CURSOR =&amp;gt; PDO::CURSOR_FWDONLY));  
    $execRet = $pdoStatement-&amp;gt;execute($mapData);  
    return $execRet ? ($returnInsertId ? $this-&amp;gt;pdo-&amp;gt;lastInsertId() : $execRet) : false;  
  } else {  
    return false;  
  }  
}  
 //修改  
public function update($tableName, $data, $condition, $mapData = array(), $returnRowCount = true) {  
  if(!empty($tableName) &amp;amp;&amp;amp; count($data) &amp;gt; 0) {  
    $sql = &#39;UPDATE &#39; . $tableName . &#39; SET &#39;;  
    list($setSql, $mapSetData) = $this-&amp;gt;FDFields($data);  
    $sql .= $setSql;  
    $mapData = array_merge($mapData, $mapSetData);  
    list($where, $mapData) = $this-&amp;gt;FDCondition($condition, $mapData);  
    $sql .= $where ? &#39; WHERE &#39; . $where : &#39;&#39;;  
    $pdoStatement = $this-&amp;gt;pdo-&amp;gt;prepare($sql, array(PDO::ATTR_CURSOR =&amp;gt; PDO::CURSOR_FWDONLY));  
    $execRet = $pdoStatement-&amp;gt;execute($mapData);  
    return $execRet ? ($returnRowCount ? $pdoStatement-&amp;gt;rowCount() : $execRet) : false;  
  } else {  
    return false;  
  }  
}  
 //删除  
public function delete($tableName, $condition, $mapData = array()) {  
  if(!empty($tableName) &amp;amp;&amp;amp; $condition){  
    $sql = &#39;DELETE FROM &#39; . $tableName;  
    list($where, $mapData) = $this-&amp;gt;FDCondition($condition, $mapData);  
    $sql .= $where ? &#39; WHERE &#39; . $where : &#39;&#39;;  
    $pdoStatement = $this-&amp;gt;pdo-&amp;gt;prepare($sql, array(PDO::ATTR_CURSOR =&amp;gt; PDO::CURSOR_FWDONLY));  
    $execRet = $pdoStatement-&amp;gt;execute($mapData);  
    return $execRet;  
  }  
}  
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;参考地址：(http://blog.csdn.net/hello_katty/article/details/45840409)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 29 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/29/mysql/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/29/mysql/</guid>
        
        <category>数据库开发</category>
        
        <category>MySql</category>
        
        <category>原创</category>
        
        
      </item>
    
      <item>
        <title>jekyll:搭建自己的博客「原」</title>
        <description>&lt;p&gt;世上无难事只怕有心人，同样的世上没有装不好的环境，只有找不对的教程。这不是心血来潮想搭建一个基于jekyll的个人博客环境，兴冲冲的就找官方文档&lt;br /&gt;
 结果一看就傻眼了，纳尼，全是英文，看的眼都花了都不知道怎么回事，严重的吐槽一下，所幸国内前辈挺多的，于是乎参照他们的来了，自己搭了一遍。&lt;br /&gt;
     好我先申明一下我是在windows10下进行安装的：&lt;br /&gt;
	 安装 Ruby&lt;br /&gt;
Jekyll是一款基于Ruby的插件，安装Ruby是必须的.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;下载，传送阵：http://rubyinstaller.org/downloads/&lt;/li&gt;
  &lt;li&gt;点击版本并下载，这里我下载的是：“Ruby 2.2.1 (x64)”&lt;/li&gt;
  &lt;li&gt;点击进行安装，此时需要注意两点： &lt;br /&gt;
*安装目录不允许包含空格 &lt;br /&gt;
*选中“Add Ruby executables to your PATH”这样将自动完成环境变量的配置。 &lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150325120514276&quot; /&gt;&lt;br /&gt;
4.完成后进入“CMD”输入“ruby -v”如显示版本则代表安装成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;安装 DevKit&lt;/p&gt;

&lt;p&gt;DevKit 是一个在 Windows 上帮助简化安装及使用 Ruby C/C++ 扩展如 RDiscount 和 RedCloth 的工具箱。&lt;br /&gt;
更多详细的安装指南请查看Ruby的 wiki 页面 阅读。&lt;/p&gt;

&lt;p&gt;1.前往 http://rubyinstaller.org/downloads/&lt;/p&gt;

&lt;p&gt;2.下载与 Ruby 版本相对应的 DevKit 安装包。 例如：“DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe” &lt;br /&gt;
版本对应关系：&lt;/p&gt;

&lt;p&gt;Ruby 1.8.7 and 1.9.3: &lt;br /&gt;
DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe&lt;/p&gt;

&lt;p&gt;2.0 and 2.1 (32bits version only): &lt;br /&gt;
DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&lt;/p&gt;

&lt;p&gt;2.0 and 2.1 (x64 - 64bits only) &lt;br /&gt;
DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe&lt;/p&gt;

&lt;p&gt;3.运行文件选择解压目录，如“D:\Ruby\DevKit”&lt;/p&gt;

&lt;p&gt;4.解压完成后，通过初始化来创建 config.yml 文件。在命令行窗口内，输入下列命令：&lt;/p&gt;

&lt;p&gt;cd “D:\ToolKits\Ruby\DevKit”&lt;br /&gt;
ruby dk.rb init&lt;br /&gt;
notepad config.yml&lt;/p&gt;

&lt;p&gt;5.回到命令行窗口内进行安装。（非必需）&lt;/p&gt;

&lt;p&gt;ruby dk.rb install&lt;/p&gt;

&lt;p&gt;安装 Jekyll&lt;/p&gt;

&lt;p&gt;//命令行执行&lt;br /&gt;
 gem install jekyll&lt;/p&gt;

&lt;p&gt;错误 &lt;br /&gt;
在这里或许你将遇到一定的问题，比如：&lt;/p&gt;

&lt;p&gt;ERROR: Could not find a valid gem ‘jekyll’ (&amp;gt;= 0), here is why: &lt;br /&gt;
Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/latest_spece.4.8.gz)&lt;/p&gt;

&lt;p&gt;解决方法&lt;br /&gt;
百度关键词“jekyll 镜像替换”将现在的源移除添加中国镜像或是淘宝镜像&lt;/p&gt;

&lt;p&gt;安装 Rouge&lt;/p&gt;

&lt;p&gt;一般来说静态生成中经常会使用高亮代码等功能，而高亮代码的生成一般需要插件帮助完成才行；在常规中一般都是使用：“Pygments”；因为”Pygments“是python下面的插件，所以需要先安装Python之后才能安装该插件，我嫌麻烦在实际使用中采用的是”Rouge“高亮插件。 &lt;br /&gt;
之所以使用：”Rouge”，是因为在 Jekyll 官网中也曾提到以后将会使用该插件。 &lt;br /&gt;
安装步骤非常简单，同样使用命令行安装就OK：&lt;/p&gt;

&lt;p&gt;gem install rouge&lt;/p&gt;

&lt;p&gt;Chocolatey的安装&lt;br /&gt;
要安装Chocolatey很简单，需要以管理员权限打开命令提示符窗口，然后输入以下命令即可：&lt;/p&gt;

&lt;p&gt;@powershell -NoProfile -ExecutionPolicy Bypass -Command “iex ((new-object net.webclient).DownloadString(‘https://chocolatey.org/install.ps1’))” &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&lt;/p&gt;

&lt;p&gt;Nokogiri软件包安装Permalink&lt;/p&gt;

&lt;p&gt;github-pages运行时需要Nokogiri这个软件包，但是要运行在64位Windows系统上还需要执行以下命令：&lt;/p&gt;

&lt;p&gt;注意: 在当前版本 pre release 中提供了64位Windows系统支持，但是github-pages中并没有引用这个版本。&lt;/p&gt;

&lt;p&gt;choco install libxml2 -Source “https://www.nuget.org/api/v2/”&lt;br /&gt;
choco install libxslt -Source “https://www.nuget.org/api/v2/”&lt;br /&gt;
choco install libiconv -Source “https://www.nuget.org/api/v2/”&lt;/p&gt;

&lt;p&gt;gem install nokogiri –^&lt;br /&gt;
   –with-xml2-include=C:\Chocolatey\lib\libxml2.2.7.8.7\build\native\include^&lt;br /&gt;
   –with-xml2-lib=C:\Chocolatey\lib\libxml2.redist.2.7.8.7\build\native\bin\v110\x64\Release\dynamic\cdecl^&lt;br /&gt;
   –with-iconv-include=C:\Chocolatey\lib\libiconv.1.14.0.11\build\native\include^&lt;br /&gt;
   –with-iconv-lib=C:\Chocolatey\lib\libiconv.redist.1.14.0.11\build\native\bin\v110\x64\Release\dynamic\cdecl^&lt;br /&gt;
   –with-xslt-include=C:\Chocolatey\lib\libxslt.1.1.28.0\build\native\include^&lt;br /&gt;
   –with-xslt-lib=C:\Chocolatey\lib\libxslt.redist.1.1.28.0\build\native\bin\v110\x64\Release\dynamic&lt;/p&gt;

&lt;p&gt;安装 github-pagesPermalink&lt;br /&gt;
 打开命令行界面安装 Bundler: gem install bundler&lt;br /&gt;
 打开自己博客的根目录&lt;/p&gt;

&lt;p&gt;jekyll new my-awesome-site   //将my-awesome-site这个博客生成到当前目录下&lt;br /&gt;
   cd my-awesome-site   //进入博客根目录&lt;br /&gt;
   jekyll serve  //启动服务&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/27/jiaocheng-jekyll/</link>
        <guid isPermaLink="true">https://github.com/huaxiazhijian/huaxiazhijian.github.io/2016/10/27/jiaocheng-jekyll/</guid>
        
        <category>前端开发</category>
        
        <category>Jekyll</category>
        
        <category>原创</category>
        
        
      </item>
    
  </channel>
</rss>
